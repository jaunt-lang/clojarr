<project name="clojure" default="all">

  <description>
    Build with "ant" and then start the
    REPL with: "java -cp jaunt.jar clojure.main".

    Note: You may need to run the antsetup.sh script included.
  </description>

  <property environment="env"/>
  
  <property name="src" location="src"/>
  <property name="test" location="test"/>
  <property name="jsrc" location="${src}/jvm"/>
  <property name="jtestsrc" location="${test}/java"/>
  <property name="cljsrc" location="${src}/clj"/>
  <property name="cljscript" location="${src}/script"/>
  <property name="test-script" location="${cljscript}/run_test.clj"/>
  <property name="test-generative-script" location="${cljscript}/run_test_generative.clj"/>
  <property name="compile-script" location="${cljscript}/bootstrap_compile.clj"/>
  <property name="target" location="target"/>
  <property name="build" location="${target}/classes"/>
  <property name="test-classes" location="${target}/test-classes"/>
  <property file="maven-classpath.properties"/>
    <condition property="dist" value="${env.CIRCLE_ARTIFACTS}" else="dist">
    <isset property="env.CIRCLE_ARTIFACTS"/>
  </condition>

  <!-- Get the version string out of the POM -->
  <xmlproperty file="pom.xml" prefix="pom"/>
  <property name="clojure.version.label" value="${pom.project.version}"/>
  <property name="version.properties" value="${build}/clojure/version.properties"/>

  <property name="clojure_jar" location="${dist}/jaunt-${clojure.version.label}.jar"/>
  <property name="clojure_noversion_jar" location="${dist}/jaunt.jar"/>

  <property name="directlinking" value="true"/>

  <!-- Lazy compilation flag files -->
  <property name="compile-java-flag" value="${target}/compile-java.flag"/>
  <property name="compile-clojure-flag" value="${target}/compile-clojure.flag"/>
  <property name="compile-tests-flag" value="${target}/compile-tests.flag"/>
  <property name="test-example-flag" value="${target}/test-example.flag"/>
  <property name="test-generative-flag" value="${target}/test-generative.flag"/>

  <target name="init" depends="">
    <tstamp/>
    <mkdir dir="${build}"/>
    <mkdir dir="${build}/clojure"/>
    <echo file="${version.properties}">version=${clojure.version.label}</echo>
  </target>

  <target name="compile-java.check">
    <condition property="compile-java.uptodate">
      <uptodate targetfile="${compile-java-flag}">
        <srcfiles dir= "${jsrc}" includes="**/*.java"/>
      </uptodate>
    </condition>
  </target>

  <target name="compile-java"
          depends="init,compile-java.check"
          unless="compile-java.uptodate"
          description="Compile Java sources.">
    <javac srcdir="${jsrc}" destdir="${build}" includeJavaRuntime="yes"
           includeAntRuntime="false"
           debug="true" source="1.6" target="1.6"/>
    <touch file="${compile-java-flag}"/>
  </target>
  
  <target name="compile-clojure.check"
          depends="compile-java.check">
    <uptodate property="compile-clojure.files.uptodate">
      <srcfiles dir="${cljsrc}" includes="**/*.clj"/>
      <srcfiles dir="${cljsrc}" includes="**/*.cljc"/>
      <srcfiles dir="${cljsrc}" includes="**/*.edn"/>
      <mapper type="merge" to="${compile-clojure-flag}"/>
    </uptodate>
    <condition property="compile-clojure.uptodate">
      <and>
        <istrue value="${compile-java.uptodate}"/>
        <istrue value="${compile-clojure.files.uptodate}"/>
      </and>
    </condition>
  </target>

  <target name="compile-clojure"
          depends="compile-java,compile-clojure.check"
          unless="compile-clojure.uptodate"
          description="Compile Clojure sources.">
    <java classname="clojure.lang.Compile"
          classpath="${maven.compile.classpath}:${build}:${cljsrc}"
          failonerror="true"
          fork="true">
      <sysproperty key="clojure.compile.path" value="${build}"/>
      <!--<sysproperty key="clojure.compiler.elide-meta" value="[:doc :file :line :added]"/>-->
      <!--<sysproperty key="clojure.compiler.disable-locals-clearing" value="true"/>-->
      <!--<sysproperty key="clojure.compile.warn-on-reflection" value="true"/>-->
      <sysproperty key="clojure.compiler.direct-linking" value="true"/>
      <sysproperty key="java.awt.headless" value="true"/>
      <arg value="clojure.core"/>
      <arg value="clojure.core.protocols"/>
      <arg value="clojure.core.server"/>
      <arg value="clojure.main"/>
      <arg value="clojure.set"/>
      <arg value="clojure.edn"/>
      <arg value="clojure.xml"/>
      <arg value="clojure.zip"/>
      <arg value="clojure.inspector"/>
      <arg value="clojure.walk"/>
      <arg value="clojure.stacktrace"/>
      <arg value="clojure.template"/>
      <arg value="clojure.test"/>
      <arg value="clojure.test.tap"/>
      <arg value="clojure.test.junit"/>
      <arg value="clojure.pprint"/>
      <arg value="clojure.java.io"/>
      <arg value="clojure.repl"/>
      <arg value="clojure.java.browse"/>
      <arg value="clojure.java.javadoc"/>
      <arg value="clojure.java.shell"/>
      <arg value="clojure.java.browse-ui"/>
      <arg value="clojure.string"/>
      <arg value="clojure.data"/>
      <arg value="clojure.reflect"/>
    </java>
    <touch file="${compile-clojure-flag}"/>
  </target>

  <target name="compile-tests.check"
          depends="compile-clojure.check">
    <uptodate property="compile-tests.files.uptodate">
      <srcfiles dir="${test}" includes="**/*.clj"/>
      <srcfiles dir="${test}" includes="**/*.cljc"/>
      <srcfiles dir="${test}" includes="**/*.edn"/>
      <mapper type="merge" to="${compile-tests-flag}"/>
    </uptodate>
    <condition property="compile-tests.uptodate">
      <and>
        <istrue value="${compile-clojure.uptodate}"/>
        <istrue value="${compile-tests.files.uptodate}"/>
      </and>
    </condition>
  </target>

  <target name="compile-tests"
          description="Compile the subset of tests that require compilation."
          depends="compile-clojure,compile-tests.check"
          unless="compile-tests.uptodate">
    <mkdir dir="${test-classes}"/>
    <javac srcdir="${jtestsrc}" destdir="${test-classes}" includeJavaRuntime="yes"
           debug="true" source="1.6" target="1.6" includeantruntime="no"/>
    <echo>Direct linking = ${directlinking}</echo>
    <java classname="clojure.lang.Compile"
          classpath="${test-classes}:${test}:${build}:${cljsrc}"
          failonerror="true"
          fork="true">
      <sysproperty key="clojure.compile.path" value="${test-classes}"/>
      <!--<sysproperty key="clojure.compiler.elide-meta" value="[:doc]"/>-->
      <!--<sysproperty key="clojure.compiler.disable-locals-clearing" value="true"/>-->
      <sysproperty key="clojure.compiler.direct-linking" value="${directlinking}"/>
      <arg value="clojure.test-clojure.protocols.examples"/>
      <arg value="clojure.test-clojure.genclass.examples"/>
      <arg value="clojure.test-clojure.compilation.load-ns"/>
      <arg value="clojure.test-clojure.annotations"/>
    </java>
    <touch file="${compile-tests-flag}"/>
  </target>

  <target name="test-example.check">
    <condition property="test-example.files.uptodate">
      <uptodate targetfile="${test-example-flag}">
        <srcfiles dir="${test}" includes="**/*.clj"/>
        <srcfiles dir="${test}" includes="**/*.cljc"/>
        <srcfiles dir="${test}" includes="**/*.edn"/>
      </uptodate>
    </condition>
    
    <condition property="test-example.uptodate">
      <or>
        <istrue value="${maven.test.skip}"/>
        <and>
          <istrue value="${compile-tests.uptodate}"/>
          <istrue value="${compile-clojure.uptodate}"/>
          <istrue value="${test-example.files.uptodate}"/>
        </and>
      </or>
    </condition>
  </target>
  
  <target name="test-example"
          description="Run clojure tests without recompiling clojure."
          depends="compile-tests,test-example.check"
          unless="test-example.uptodate">
    <java classname="clojure.main"
          failonerror="true"
          fork="true"
          maxmemory="3g">
      <sysproperty key="clojure.test-clojure.exclude-namespaces"
                   value="#{clojure.test-clojure.compilation.load-ns}"/>
      <sysproperty key="clojure.compiler.direct-linking" value="${directlinking}"/>
      <classpath>
        <pathelement path="${maven.test.classpath}"/>
        <path location="${test-classes}"/>
        <path location="${test}"/>
        <path location="${build}"/>
        <path location="${cljsrc}"/>
      </classpath>
      <arg value="${test-script}"/>
    </java>
    <touch file="${test-example-flag}"/>
  </target>

  <target name="test-generative.check"
          depends="compile-clojure.check,compile-tests.check">
    <condition property="test-generative.files.uptodate">
      <uptodate targetfile="${test-generative-flag}">
        <srcfiles dir="${test}" includes="**/*.clj"/>
        <srcfiles dir="${test}" includes="**/*.cljc"/>
        <srcfiles dir="${test}" includes="**/*.edn"/>
      </uptodate>
    </condition>
    <condition property="test-generative.uptodate">
      <or>
        <istrue value="${maven.test.skip}"/>
        <and>
          <istrue value="${compile-tests.uptodate}"/>
          <istrue value="${compile-clojure.uptodate}"/>
          <istrue value="${test-generative.files.uptodate}"/>
        </and>
      </or>
    </condition>
  </target>

  <target name="test-generative"
          description="Run test generative tests without recompiling clojure."
          depends="compile-tests,test-generative.check"
          unless="test-generative.uptodate">
    <java classname="clojure.main"
          failonerror="true"
          fork="true"
          maxmemory="3g">
      <sysproperty key="clojure.compiler.direct-linking" value="${directlinking}"/>
      <classpath>
        <pathelement path="${maven.test.classpath}"/>
        <path location="${test-classes}"/>
        <path location="${test}"/>
        <path location="${build}"/>
        <path location="${cljsrc}"/>
      </classpath>
      <arg value="${test-generative-script}"/>
    </java>
    <touch file="${test-generative-flag}"/>
  </target>

  <target name="test"
          description="Run all the tests"
          depends="test-example,test-generative"/>

  <target name="build"
          description="Build Clojure (compilation only, no tests)."
          depends="compile-java, compile-clojure"/>

  <target name="jar.check"
          depends="compile-java.check,compile-clojure.check">
    <condition property="jar.files.uptodate">
      <uptodate targetfile="${clojure_jar}">
        <srcfiles dir="${src}" includes="**/*.clj"/>
        <srcfiles dir="${src}" includes="**/*.cljc"/>
        <srcfiles dir="${src}" includes="**/*.edn"/>
        <srcfiles dir="${build}" includes="**/*.class"/>
      </uptodate>
    </condition>

    <condition property="jar.uptodate">
      <and>
        <istrue value="${compile-java.uptodate}"/>
        <istrue value="${compile-clojure.uptodate}"/>
        <istrue value="${jar.files.uptodate}"/>
      </and>
    </condition>
  </target>
  
  <target name="jar"
          depends="build,jar.check"
          unless="jar.uptodate"
          description="Create clojure jar file.">
    <jar jarfile="${clojure_jar}" basedir="${build}">
      <fileset dir="${cljsrc}">
        <include name="**/*.clj"/>
      </fileset>
      <manifest>
        <attribute name="Main-Class" value="clojure.main"/>
        <attribute name="Class-Path" value="."/>
      </manifest>
    </jar>
    <copy file="${clojure_jar}" tofile="${clojure_noversion_jar}"/>
  </target>

  <target name="javadoc"
          description="Creates javadoc for Clojure API.">
    <copy file="src/jvm/clojure/lang/IFn.java" tofile="target/tmpjd/IFn.java"/>
    <copy file="src/jvm/clojure/lang/package.html" tofile="target/tmpjd/package.html"/>
    <replaceregexp file="target/tmpjd/IFn.java" match="(static public interface .*})" replace="" byline="true"/>
    <javadoc destdir="target/javadoc"
             nodeprecatedlist="true" nohelp="true" nonavbar="true" notree="true"
             link="http://docs.oracle.com/javase/7/docs/api/"
             windowtitle="Clojure API">
      <classpath>
        <path location="${build}"/>
      </classpath>
      <fileset dir="${basedir}">
        <include name="src/jvm/clojure/java/api/Clojure.java"/>
        <include name="target/tmpjd/IFn.java"/>
      </fileset>
    </javadoc>
  </target>

  <target name="all" depends="build,test,jar"/>

  <target name="clean"
          description="Remove autogenerated files and directories.">
    <delete dir="${target}"/>
    <delete verbose="true">
      <fileset dir="${basedir}" includes="*.jar"/>
      <fileset dir="${basedir}" includes="*.zip"/>
    </delete>
  </target>
</project>
